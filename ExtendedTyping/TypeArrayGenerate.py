# Author: Jesse Russell
# Summary: Generates the struct definitions for the TypeArray datatype, up to n type parameters.

# Parameters:
FILE_NAME = "TypeArray.cs"
NAMESPACE = "ExtendedTyping"
STRUCT_NAME = "TypeArray"
TYPE_PARAMETER_COUNT = 32
#


# Constants:
INDENT = "    "
#


# Returns string representation of the parameter: enumerable, delimited my the delim parameter.
def to_delim_string(enumerable, delim=", "):
    s = ""
    first = True
    for item in enumerable:
        if not first:
            s = s + delim

        s = s + str(item)

        first = False

    return s


# Open output file.
output = open(FILE_NAME, "w")

# #=========================#
# | Begin code generation:  |
# | ----------------------  |
# #=========================#

# Note.
output.write("//This code was generated by TypeArrayGenerate.py\n")

# Using directives:
output.write("using System;\n" +
             "using System.Collections;\n" +
             "using System.Collections.Generic;\n")
#

# Namespace declaration.
output.write("namespace " + NAMESPACE + "\n{\n")

types = []
# Main loop...
for i in range(1, TYPE_PARAMETER_COUNT + 1):
    # Increment the last type parameter.
    types.append("T" + str(i))

    # Just to make things easier:
        # FullName...
    def full_name():
        return STRUCT_NAME + "<" + to_delim_string(types) + ">"

    FULL_NAME = full_name()

        # tn...
    def t(j):
        return "t" + str(j)

        # Tn...
    def T(j):
        return "T" + str(j)
    #

    # Struct declaration:
    output.write(INDENT + "public struct " + FULL_NAME + " : IEnumerable<Type>\n" +
                 INDENT + "{\n")
    #

    # GetEnumerator:
    output.write(INDENT * 2 + "public IEnumerator<Type> GetEnumerator()\n"+
                 INDENT * 2 + "{\n")
    for j in range(1, i + 1):
        output.write(INDENT * 3 + "yield return typeof(" + T(j) + ");\n")
    output.write(INDENT * 2 + "}\n")

    output.write(INDENT * 2 + "IEnumerator IEnumerable.GetEnumerator() => this.GetEnumerator();")
    #

    # Close struct.
    output.write("    }\n")

# Close namespace.
output.write("}")

# *Code Generation finished.

# Close output file.
output.close()
