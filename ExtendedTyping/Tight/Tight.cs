//This code was generated by TightGenerate.py
using System;
namespace ExtendedTyping
{
    public interface ITight : ITyping
    {
    }
    public struct Tight<T1> : ITight
    {
        public static implicit operator T1(Tight<T1> self) => self.V;
        /// <summary>
        /// Creates and returns a new Tight<T1>
        /// </summary>
        public static Tight<T1> New<U>(U v) where U : T1 =>
        new Tight<T1>(v);
        /// <summary>
        /// The value stored in the current Tight type.
        /// </summary>
        public dynamic V { get; }
        private Tight(dynamic v) => V = v;
        public override string ToString() => V.ToString();
        public override bool Equals(object obj) => V.Equals(obj);
        public override int GetHashCode() => V.GetHashCode();
        /// <summary>
        /// The type of the value stored in the current Tight type.
        /// </summary>
        public Type Type => V.GetType();
        /// <summary>
        /// The value stored in the current Tight type in the form of an object.
        /// </summary>
        public object O => V;
        public static bool operator ==(Tight<T1> left, Tight<T1> right) => left.V.Equals(right.V);
        public static bool operator !=(Tight<T1> left, Tight<T1> right) => !left.V.Equals(right.V);
    }
    public struct Tight<T1, T2> : ITight
    {
        public static implicit operator T1(Tight<T1, T2> self) => self.V;
        public static implicit operator T2(Tight<T1, T2> self) => self.V;
        /// <summary>
        /// Creates and returns a new Tight<T1, T2>
        /// </summary>
        public static Tight<T1, T2> New<U>(U v) where U : T1, T2 =>
        new Tight<T1, T2>(v);
        /// <summary>
        /// The value stored in the current Tight type.
        /// </summary>
        public dynamic V { get; }
        private Tight(dynamic v) => V = v;
        public override string ToString() => V.ToString();
        public override bool Equals(object obj) => V.Equals(obj);
        public override int GetHashCode() => V.GetHashCode();
        /// <summary>
        /// The type of the value stored in the current Tight type.
        /// </summary>
        public Type Type => V.GetType();
        /// <summary>
        /// The value stored in the current Tight type in the form of an object.
        /// </summary>
        public object O => V;
        public static bool operator ==(Tight<T1, T2> left, Tight<T1, T2> right) => left.V.Equals(right.V);
        public static bool operator !=(Tight<T1, T2> left, Tight<T1, T2> right) => !left.V.Equals(right.V);
    }
    public struct Tight<T1, T2, T3> : ITight
    {
        public static implicit operator T1(Tight<T1, T2, T3> self) => self.V;
        public static implicit operator T2(Tight<T1, T2, T3> self) => self.V;
        public static implicit operator T3(Tight<T1, T2, T3> self) => self.V;
        /// <summary>
        /// Creates and returns a new Tight<T1, T2, T3>
        /// </summary>
        public static Tight<T1, T2, T3> New<U>(U v) where U : T1, T2, T3 =>
        new Tight<T1, T2, T3>(v);
        /// <summary>
        /// The value stored in the current Tight type.
        /// </summary>
        public dynamic V { get; }
        private Tight(dynamic v) => V = v;
        public override string ToString() => V.ToString();
        public override bool Equals(object obj) => V.Equals(obj);
        public override int GetHashCode() => V.GetHashCode();
        /// <summary>
        /// The type of the value stored in the current Tight type.
        /// </summary>
        public Type Type => V.GetType();
        /// <summary>
        /// The value stored in the current Tight type in the form of an object.
        /// </summary>
        public object O => V;
        public static bool operator ==(Tight<T1, T2, T3> left, Tight<T1, T2, T3> right) => left.V.Equals(right.V);
        public static bool operator !=(Tight<T1, T2, T3> left, Tight<T1, T2, T3> right) => !left.V.Equals(right.V);
    }
    public struct Tight<T1, T2, T3, T4> : ITight
    {
        public static implicit operator T1(Tight<T1, T2, T3, T4> self) => self.V;
        public static implicit operator T2(Tight<T1, T2, T3, T4> self) => self.V;
        public static implicit operator T3(Tight<T1, T2, T3, T4> self) => self.V;
        public static implicit operator T4(Tight<T1, T2, T3, T4> self) => self.V;
        /// <summary>
        /// Creates and returns a new Tight<T1, T2, T3, T4>
        /// </summary>
        public static Tight<T1, T2, T3, T4> New<U>(U v) where U : T1, T2, T3, T4 =>
        new Tight<T1, T2, T3, T4>(v);
        /// <summary>
        /// The value stored in the current Tight type.
        /// </summary>
        public dynamic V { get; }
        private Tight(dynamic v) => V = v;
        public override string ToString() => V.ToString();
        public override bool Equals(object obj) => V.Equals(obj);
        public override int GetHashCode() => V.GetHashCode();
        /// <summary>
        /// The type of the value stored in the current Tight type.
        /// </summary>
        public Type Type => V.GetType();
        /// <summary>
        /// The value stored in the current Tight type in the form of an object.
        /// </summary>
        public object O => V;
        public static bool operator ==(Tight<T1, T2, T3, T4> left, Tight<T1, T2, T3, T4> right) => left.V.Equals(right.V);
        public static bool operator !=(Tight<T1, T2, T3, T4> left, Tight<T1, T2, T3, T4> right) => !left.V.Equals(right.V);
    }
    public struct Tight<T1, T2, T3, T4, T5> : ITight
    {
        public static implicit operator T1(Tight<T1, T2, T3, T4, T5> self) => self.V;
        public static implicit operator T2(Tight<T1, T2, T3, T4, T5> self) => self.V;
        public static implicit operator T3(Tight<T1, T2, T3, T4, T5> self) => self.V;
        public static implicit operator T4(Tight<T1, T2, T3, T4, T5> self) => self.V;
        public static implicit operator T5(Tight<T1, T2, T3, T4, T5> self) => self.V;
        /// <summary>
        /// Creates and returns a new Tight<T1, T2, T3, T4, T5>
        /// </summary>
        public static Tight<T1, T2, T3, T4, T5> New<U>(U v) where U : T1, T2, T3, T4, T5 =>
        new Tight<T1, T2, T3, T4, T5>(v);
        /// <summary>
        /// The value stored in the current Tight type.
        /// </summary>
        public dynamic V { get; }
        private Tight(dynamic v) => V = v;
        public override string ToString() => V.ToString();
        public override bool Equals(object obj) => V.Equals(obj);
        public override int GetHashCode() => V.GetHashCode();
        /// <summary>
        /// The type of the value stored in the current Tight type.
        /// </summary>
        public Type Type => V.GetType();
        /// <summary>
        /// The value stored in the current Tight type in the form of an object.
        /// </summary>
        public object O => V;
        public static bool operator ==(Tight<T1, T2, T3, T4, T5> left, Tight<T1, T2, T3, T4, T5> right) => left.V.Equals(right.V);
        public static bool operator !=(Tight<T1, T2, T3, T4, T5> left, Tight<T1, T2, T3, T4, T5> right) => !left.V.Equals(right.V);
    }
    public struct Tight<T1, T2, T3, T4, T5, T6> : ITight
    {
        public static implicit operator T1(Tight<T1, T2, T3, T4, T5, T6> self) => self.V;
        public static implicit operator T2(Tight<T1, T2, T3, T4, T5, T6> self) => self.V;
        public static implicit operator T3(Tight<T1, T2, T3, T4, T5, T6> self) => self.V;
        public static implicit operator T4(Tight<T1, T2, T3, T4, T5, T6> self) => self.V;
        public static implicit operator T5(Tight<T1, T2, T3, T4, T5, T6> self) => self.V;
        public static implicit operator T6(Tight<T1, T2, T3, T4, T5, T6> self) => self.V;
        /// <summary>
        /// Creates and returns a new Tight<T1, T2, T3, T4, T5, T6>
        /// </summary>
        public static Tight<T1, T2, T3, T4, T5, T6> New<U>(U v) where U : T1, T2, T3, T4, T5, T6 =>
        new Tight<T1, T2, T3, T4, T5, T6>(v);
        /// <summary>
        /// The value stored in the current Tight type.
        /// </summary>
        public dynamic V { get; }
        private Tight(dynamic v) => V = v;
        public override string ToString() => V.ToString();
        public override bool Equals(object obj) => V.Equals(obj);
        public override int GetHashCode() => V.GetHashCode();
        /// <summary>
        /// The type of the value stored in the current Tight type.
        /// </summary>
        public Type Type => V.GetType();
        /// <summary>
        /// The value stored in the current Tight type in the form of an object.
        /// </summary>
        public object O => V;
        public static bool operator ==(Tight<T1, T2, T3, T4, T5, T6> left, Tight<T1, T2, T3, T4, T5, T6> right) => left.V.Equals(right.V);
        public static bool operator !=(Tight<T1, T2, T3, T4, T5, T6> left, Tight<T1, T2, T3, T4, T5, T6> right) => !left.V.Equals(right.V);
    }
    public struct Tight<T1, T2, T3, T4, T5, T6, T7> : ITight
    {
        public static implicit operator T1(Tight<T1, T2, T3, T4, T5, T6, T7> self) => self.V;
        public static implicit operator T2(Tight<T1, T2, T3, T4, T5, T6, T7> self) => self.V;
        public static implicit operator T3(Tight<T1, T2, T3, T4, T5, T6, T7> self) => self.V;
        public static implicit operator T4(Tight<T1, T2, T3, T4, T5, T6, T7> self) => self.V;
        public static implicit operator T5(Tight<T1, T2, T3, T4, T5, T6, T7> self) => self.V;
        public static implicit operator T6(Tight<T1, T2, T3, T4, T5, T6, T7> self) => self.V;
        public static implicit operator T7(Tight<T1, T2, T3, T4, T5, T6, T7> self) => self.V;
        /// <summary>
        /// Creates and returns a new Tight<T1, T2, T3, T4, T5, T6, T7>
        /// </summary>
        public static Tight<T1, T2, T3, T4, T5, T6, T7> New<U>(U v) where U : T1, T2, T3, T4, T5, T6, T7 =>
        new Tight<T1, T2, T3, T4, T5, T6, T7>(v);
        /// <summary>
        /// The value stored in the current Tight type.
        /// </summary>
        public dynamic V { get; }
        private Tight(dynamic v) => V = v;
        public override string ToString() => V.ToString();
        public override bool Equals(object obj) => V.Equals(obj);
        public override int GetHashCode() => V.GetHashCode();
        /// <summary>
        /// The type of the value stored in the current Tight type.
        /// </summary>
        public Type Type => V.GetType();
        /// <summary>
        /// The value stored in the current Tight type in the form of an object.
        /// </summary>
        public object O => V;
        public static bool operator ==(Tight<T1, T2, T3, T4, T5, T6, T7> left, Tight<T1, T2, T3, T4, T5, T6, T7> right) => left.V.Equals(right.V);
        public static bool operator !=(Tight<T1, T2, T3, T4, T5, T6, T7> left, Tight<T1, T2, T3, T4, T5, T6, T7> right) => !left.V.Equals(right.V);
    }
    public struct Tight<T1, T2, T3, T4, T5, T6, T7, T8> : ITight
    {
        public static implicit operator T1(Tight<T1, T2, T3, T4, T5, T6, T7, T8> self) => self.V;
        public static implicit operator T2(Tight<T1, T2, T3, T4, T5, T6, T7, T8> self) => self.V;
        public static implicit operator T3(Tight<T1, T2, T3, T4, T5, T6, T7, T8> self) => self.V;
        public static implicit operator T4(Tight<T1, T2, T3, T4, T5, T6, T7, T8> self) => self.V;
        public static implicit operator T5(Tight<T1, T2, T3, T4, T5, T6, T7, T8> self) => self.V;
        public static implicit operator T6(Tight<T1, T2, T3, T4, T5, T6, T7, T8> self) => self.V;
        public static implicit operator T7(Tight<T1, T2, T3, T4, T5, T6, T7, T8> self) => self.V;
        public static implicit operator T8(Tight<T1, T2, T3, T4, T5, T6, T7, T8> self) => self.V;
        /// <summary>
        /// Creates and returns a new Tight<T1, T2, T3, T4, T5, T6, T7, T8>
        /// </summary>
        public static Tight<T1, T2, T3, T4, T5, T6, T7, T8> New<U>(U v) where U : T1, T2, T3, T4, T5, T6, T7, T8 =>
        new Tight<T1, T2, T3, T4, T5, T6, T7, T8>(v);
        /// <summary>
        /// The value stored in the current Tight type.
        /// </summary>
        public dynamic V { get; }
        private Tight(dynamic v) => V = v;
        public override string ToString() => V.ToString();
        public override bool Equals(object obj) => V.Equals(obj);
        public override int GetHashCode() => V.GetHashCode();
        /// <summary>
        /// The type of the value stored in the current Tight type.
        /// </summary>
        public Type Type => V.GetType();
        /// <summary>
        /// The value stored in the current Tight type in the form of an object.
        /// </summary>
        public object O => V;
        public static bool operator ==(Tight<T1, T2, T3, T4, T5, T6, T7, T8> left, Tight<T1, T2, T3, T4, T5, T6, T7, T8> right) => left.V.Equals(right.V);
        public static bool operator !=(Tight<T1, T2, T3, T4, T5, T6, T7, T8> left, Tight<T1, T2, T3, T4, T5, T6, T7, T8> right) => !left.V.Equals(right.V);
    }
    public struct Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9> : ITight
    {
        public static implicit operator T1(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9> self) => self.V;
        public static implicit operator T2(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9> self) => self.V;
        public static implicit operator T3(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9> self) => self.V;
        public static implicit operator T4(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9> self) => self.V;
        public static implicit operator T5(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9> self) => self.V;
        public static implicit operator T6(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9> self) => self.V;
        public static implicit operator T7(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9> self) => self.V;
        public static implicit operator T8(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9> self) => self.V;
        public static implicit operator T9(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9> self) => self.V;
        /// <summary>
        /// Creates and returns a new Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9>
        /// </summary>
        public static Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9> New<U>(U v) where U : T1, T2, T3, T4, T5, T6, T7, T8, T9 =>
        new Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9>(v);
        /// <summary>
        /// The value stored in the current Tight type.
        /// </summary>
        public dynamic V { get; }
        private Tight(dynamic v) => V = v;
        public override string ToString() => V.ToString();
        public override bool Equals(object obj) => V.Equals(obj);
        public override int GetHashCode() => V.GetHashCode();
        /// <summary>
        /// The type of the value stored in the current Tight type.
        /// </summary>
        public Type Type => V.GetType();
        /// <summary>
        /// The value stored in the current Tight type in the form of an object.
        /// </summary>
        public object O => V;
        public static bool operator ==(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9> left, Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9> right) => left.V.Equals(right.V);
        public static bool operator !=(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9> left, Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9> right) => !left.V.Equals(right.V);
    }
    public struct Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> : ITight
    {
        public static implicit operator T1(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> self) => self.V;
        public static implicit operator T2(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> self) => self.V;
        public static implicit operator T3(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> self) => self.V;
        public static implicit operator T4(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> self) => self.V;
        public static implicit operator T5(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> self) => self.V;
        public static implicit operator T6(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> self) => self.V;
        public static implicit operator T7(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> self) => self.V;
        public static implicit operator T8(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> self) => self.V;
        public static implicit operator T9(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> self) => self.V;
        public static implicit operator T10(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> self) => self.V;
        /// <summary>
        /// Creates and returns a new Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>
        /// </summary>
        public static Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> New<U>(U v) where U : T1, T2, T3, T4, T5, T6, T7, T8, T9, T10 =>
        new Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10>(v);
        /// <summary>
        /// The value stored in the current Tight type.
        /// </summary>
        public dynamic V { get; }
        private Tight(dynamic v) => V = v;
        public override string ToString() => V.ToString();
        public override bool Equals(object obj) => V.Equals(obj);
        public override int GetHashCode() => V.GetHashCode();
        /// <summary>
        /// The type of the value stored in the current Tight type.
        /// </summary>
        public Type Type => V.GetType();
        /// <summary>
        /// The value stored in the current Tight type in the form of an object.
        /// </summary>
        public object O => V;
        public static bool operator ==(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> left, Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> right) => left.V.Equals(right.V);
        public static bool operator !=(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> left, Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> right) => !left.V.Equals(right.V);
    }
    public struct Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> : ITight
    {
        public static implicit operator T1(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> self) => self.V;
        public static implicit operator T2(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> self) => self.V;
        public static implicit operator T3(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> self) => self.V;
        public static implicit operator T4(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> self) => self.V;
        public static implicit operator T5(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> self) => self.V;
        public static implicit operator T6(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> self) => self.V;
        public static implicit operator T7(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> self) => self.V;
        public static implicit operator T8(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> self) => self.V;
        public static implicit operator T9(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> self) => self.V;
        public static implicit operator T10(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> self) => self.V;
        public static implicit operator T11(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> self) => self.V;
        /// <summary>
        /// Creates and returns a new Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>
        /// </summary>
        public static Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> New<U>(U v) where U : T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11 =>
        new Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11>(v);
        /// <summary>
        /// The value stored in the current Tight type.
        /// </summary>
        public dynamic V { get; }
        private Tight(dynamic v) => V = v;
        public override string ToString() => V.ToString();
        public override bool Equals(object obj) => V.Equals(obj);
        public override int GetHashCode() => V.GetHashCode();
        /// <summary>
        /// The type of the value stored in the current Tight type.
        /// </summary>
        public Type Type => V.GetType();
        /// <summary>
        /// The value stored in the current Tight type in the form of an object.
        /// </summary>
        public object O => V;
        public static bool operator ==(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> left, Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> right) => left.V.Equals(right.V);
        public static bool operator !=(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> left, Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> right) => !left.V.Equals(right.V);
    }
    public struct Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> : ITight
    {
        public static implicit operator T1(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> self) => self.V;
        public static implicit operator T2(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> self) => self.V;
        public static implicit operator T3(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> self) => self.V;
        public static implicit operator T4(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> self) => self.V;
        public static implicit operator T5(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> self) => self.V;
        public static implicit operator T6(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> self) => self.V;
        public static implicit operator T7(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> self) => self.V;
        public static implicit operator T8(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> self) => self.V;
        public static implicit operator T9(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> self) => self.V;
        public static implicit operator T10(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> self) => self.V;
        public static implicit operator T11(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> self) => self.V;
        public static implicit operator T12(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> self) => self.V;
        /// <summary>
        /// Creates and returns a new Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>
        /// </summary>
        public static Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> New<U>(U v) where U : T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12 =>
        new Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12>(v);
        /// <summary>
        /// The value stored in the current Tight type.
        /// </summary>
        public dynamic V { get; }
        private Tight(dynamic v) => V = v;
        public override string ToString() => V.ToString();
        public override bool Equals(object obj) => V.Equals(obj);
        public override int GetHashCode() => V.GetHashCode();
        /// <summary>
        /// The type of the value stored in the current Tight type.
        /// </summary>
        public Type Type => V.GetType();
        /// <summary>
        /// The value stored in the current Tight type in the form of an object.
        /// </summary>
        public object O => V;
        public static bool operator ==(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> left, Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> right) => left.V.Equals(right.V);
        public static bool operator !=(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> left, Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> right) => !left.V.Equals(right.V);
    }
    public struct Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> : ITight
    {
        public static implicit operator T1(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> self) => self.V;
        public static implicit operator T2(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> self) => self.V;
        public static implicit operator T3(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> self) => self.V;
        public static implicit operator T4(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> self) => self.V;
        public static implicit operator T5(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> self) => self.V;
        public static implicit operator T6(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> self) => self.V;
        public static implicit operator T7(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> self) => self.V;
        public static implicit operator T8(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> self) => self.V;
        public static implicit operator T9(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> self) => self.V;
        public static implicit operator T10(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> self) => self.V;
        public static implicit operator T11(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> self) => self.V;
        public static implicit operator T12(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> self) => self.V;
        public static implicit operator T13(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> self) => self.V;
        /// <summary>
        /// Creates and returns a new Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>
        /// </summary>
        public static Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> New<U>(U v) where U : T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13 =>
        new Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13>(v);
        /// <summary>
        /// The value stored in the current Tight type.
        /// </summary>
        public dynamic V { get; }
        private Tight(dynamic v) => V = v;
        public override string ToString() => V.ToString();
        public override bool Equals(object obj) => V.Equals(obj);
        public override int GetHashCode() => V.GetHashCode();
        /// <summary>
        /// The type of the value stored in the current Tight type.
        /// </summary>
        public Type Type => V.GetType();
        /// <summary>
        /// The value stored in the current Tight type in the form of an object.
        /// </summary>
        public object O => V;
        public static bool operator ==(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> left, Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> right) => left.V.Equals(right.V);
        public static bool operator !=(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> left, Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> right) => !left.V.Equals(right.V);
    }
    public struct Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> : ITight
    {
        public static implicit operator T1(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> self) => self.V;
        public static implicit operator T2(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> self) => self.V;
        public static implicit operator T3(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> self) => self.V;
        public static implicit operator T4(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> self) => self.V;
        public static implicit operator T5(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> self) => self.V;
        public static implicit operator T6(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> self) => self.V;
        public static implicit operator T7(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> self) => self.V;
        public static implicit operator T8(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> self) => self.V;
        public static implicit operator T9(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> self) => self.V;
        public static implicit operator T10(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> self) => self.V;
        public static implicit operator T11(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> self) => self.V;
        public static implicit operator T12(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> self) => self.V;
        public static implicit operator T13(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> self) => self.V;
        public static implicit operator T14(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> self) => self.V;
        /// <summary>
        /// Creates and returns a new Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>
        /// </summary>
        public static Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> New<U>(U v) where U : T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14 =>
        new Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14>(v);
        /// <summary>
        /// The value stored in the current Tight type.
        /// </summary>
        public dynamic V { get; }
        private Tight(dynamic v) => V = v;
        public override string ToString() => V.ToString();
        public override bool Equals(object obj) => V.Equals(obj);
        public override int GetHashCode() => V.GetHashCode();
        /// <summary>
        /// The type of the value stored in the current Tight type.
        /// </summary>
        public Type Type => V.GetType();
        /// <summary>
        /// The value stored in the current Tight type in the form of an object.
        /// </summary>
        public object O => V;
        public static bool operator ==(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> left, Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> right) => left.V.Equals(right.V);
        public static bool operator !=(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> left, Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> right) => !left.V.Equals(right.V);
    }
    public struct Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> : ITight
    {
        public static implicit operator T1(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> self) => self.V;
        public static implicit operator T2(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> self) => self.V;
        public static implicit operator T3(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> self) => self.V;
        public static implicit operator T4(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> self) => self.V;
        public static implicit operator T5(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> self) => self.V;
        public static implicit operator T6(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> self) => self.V;
        public static implicit operator T7(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> self) => self.V;
        public static implicit operator T8(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> self) => self.V;
        public static implicit operator T9(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> self) => self.V;
        public static implicit operator T10(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> self) => self.V;
        public static implicit operator T11(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> self) => self.V;
        public static implicit operator T12(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> self) => self.V;
        public static implicit operator T13(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> self) => self.V;
        public static implicit operator T14(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> self) => self.V;
        public static implicit operator T15(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> self) => self.V;
        /// <summary>
        /// Creates and returns a new Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>
        /// </summary>
        public static Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> New<U>(U v) where U : T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15 =>
        new Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15>(v);
        /// <summary>
        /// The value stored in the current Tight type.
        /// </summary>
        public dynamic V { get; }
        private Tight(dynamic v) => V = v;
        public override string ToString() => V.ToString();
        public override bool Equals(object obj) => V.Equals(obj);
        public override int GetHashCode() => V.GetHashCode();
        /// <summary>
        /// The type of the value stored in the current Tight type.
        /// </summary>
        public Type Type => V.GetType();
        /// <summary>
        /// The value stored in the current Tight type in the form of an object.
        /// </summary>
        public object O => V;
        public static bool operator ==(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> left, Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> right) => left.V.Equals(right.V);
        public static bool operator !=(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> left, Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> right) => !left.V.Equals(right.V);
    }
    public struct Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> : ITight
    {
        public static implicit operator T1(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> self) => self.V;
        public static implicit operator T2(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> self) => self.V;
        public static implicit operator T3(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> self) => self.V;
        public static implicit operator T4(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> self) => self.V;
        public static implicit operator T5(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> self) => self.V;
        public static implicit operator T6(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> self) => self.V;
        public static implicit operator T7(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> self) => self.V;
        public static implicit operator T8(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> self) => self.V;
        public static implicit operator T9(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> self) => self.V;
        public static implicit operator T10(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> self) => self.V;
        public static implicit operator T11(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> self) => self.V;
        public static implicit operator T12(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> self) => self.V;
        public static implicit operator T13(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> self) => self.V;
        public static implicit operator T14(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> self) => self.V;
        public static implicit operator T15(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> self) => self.V;
        public static implicit operator T16(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> self) => self.V;
        /// <summary>
        /// Creates and returns a new Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>
        /// </summary>
        public static Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> New<U>(U v) where U : T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16 =>
        new Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16>(v);
        /// <summary>
        /// The value stored in the current Tight type.
        /// </summary>
        public dynamic V { get; }
        private Tight(dynamic v) => V = v;
        public override string ToString() => V.ToString();
        public override bool Equals(object obj) => V.Equals(obj);
        public override int GetHashCode() => V.GetHashCode();
        /// <summary>
        /// The type of the value stored in the current Tight type.
        /// </summary>
        public Type Type => V.GetType();
        /// <summary>
        /// The value stored in the current Tight type in the form of an object.
        /// </summary>
        public object O => V;
        public static bool operator ==(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> left, Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> right) => left.V.Equals(right.V);
        public static bool operator !=(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> left, Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> right) => !left.V.Equals(right.V);
    }
    public struct Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> : ITight
    {
        public static implicit operator T1(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> self) => self.V;
        public static implicit operator T2(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> self) => self.V;
        public static implicit operator T3(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> self) => self.V;
        public static implicit operator T4(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> self) => self.V;
        public static implicit operator T5(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> self) => self.V;
        public static implicit operator T6(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> self) => self.V;
        public static implicit operator T7(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> self) => self.V;
        public static implicit operator T8(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> self) => self.V;
        public static implicit operator T9(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> self) => self.V;
        public static implicit operator T10(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> self) => self.V;
        public static implicit operator T11(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> self) => self.V;
        public static implicit operator T12(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> self) => self.V;
        public static implicit operator T13(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> self) => self.V;
        public static implicit operator T14(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> self) => self.V;
        public static implicit operator T15(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> self) => self.V;
        public static implicit operator T16(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> self) => self.V;
        public static implicit operator T17(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> self) => self.V;
        /// <summary>
        /// Creates and returns a new Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>
        /// </summary>
        public static Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> New<U>(U v) where U : T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17 =>
        new Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17>(v);
        /// <summary>
        /// The value stored in the current Tight type.
        /// </summary>
        public dynamic V { get; }
        private Tight(dynamic v) => V = v;
        public override string ToString() => V.ToString();
        public override bool Equals(object obj) => V.Equals(obj);
        public override int GetHashCode() => V.GetHashCode();
        /// <summary>
        /// The type of the value stored in the current Tight type.
        /// </summary>
        public Type Type => V.GetType();
        /// <summary>
        /// The value stored in the current Tight type in the form of an object.
        /// </summary>
        public object O => V;
        public static bool operator ==(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> left, Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> right) => left.V.Equals(right.V);
        public static bool operator !=(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> left, Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> right) => !left.V.Equals(right.V);
    }
    public struct Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> : ITight
    {
        public static implicit operator T1(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> self) => self.V;
        public static implicit operator T2(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> self) => self.V;
        public static implicit operator T3(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> self) => self.V;
        public static implicit operator T4(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> self) => self.V;
        public static implicit operator T5(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> self) => self.V;
        public static implicit operator T6(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> self) => self.V;
        public static implicit operator T7(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> self) => self.V;
        public static implicit operator T8(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> self) => self.V;
        public static implicit operator T9(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> self) => self.V;
        public static implicit operator T10(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> self) => self.V;
        public static implicit operator T11(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> self) => self.V;
        public static implicit operator T12(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> self) => self.V;
        public static implicit operator T13(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> self) => self.V;
        public static implicit operator T14(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> self) => self.V;
        public static implicit operator T15(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> self) => self.V;
        public static implicit operator T16(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> self) => self.V;
        public static implicit operator T17(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> self) => self.V;
        public static implicit operator T18(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> self) => self.V;
        /// <summary>
        /// Creates and returns a new Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>
        /// </summary>
        public static Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> New<U>(U v) where U : T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18 =>
        new Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18>(v);
        /// <summary>
        /// The value stored in the current Tight type.
        /// </summary>
        public dynamic V { get; }
        private Tight(dynamic v) => V = v;
        public override string ToString() => V.ToString();
        public override bool Equals(object obj) => V.Equals(obj);
        public override int GetHashCode() => V.GetHashCode();
        /// <summary>
        /// The type of the value stored in the current Tight type.
        /// </summary>
        public Type Type => V.GetType();
        /// <summary>
        /// The value stored in the current Tight type in the form of an object.
        /// </summary>
        public object O => V;
        public static bool operator ==(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> left, Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> right) => left.V.Equals(right.V);
        public static bool operator !=(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> left, Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> right) => !left.V.Equals(right.V);
    }
    public struct Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> : ITight
    {
        public static implicit operator T1(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> self) => self.V;
        public static implicit operator T2(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> self) => self.V;
        public static implicit operator T3(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> self) => self.V;
        public static implicit operator T4(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> self) => self.V;
        public static implicit operator T5(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> self) => self.V;
        public static implicit operator T6(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> self) => self.V;
        public static implicit operator T7(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> self) => self.V;
        public static implicit operator T8(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> self) => self.V;
        public static implicit operator T9(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> self) => self.V;
        public static implicit operator T10(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> self) => self.V;
        public static implicit operator T11(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> self) => self.V;
        public static implicit operator T12(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> self) => self.V;
        public static implicit operator T13(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> self) => self.V;
        public static implicit operator T14(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> self) => self.V;
        public static implicit operator T15(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> self) => self.V;
        public static implicit operator T16(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> self) => self.V;
        public static implicit operator T17(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> self) => self.V;
        public static implicit operator T18(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> self) => self.V;
        public static implicit operator T19(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> self) => self.V;
        /// <summary>
        /// Creates and returns a new Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>
        /// </summary>
        public static Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> New<U>(U v) where U : T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19 =>
        new Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19>(v);
        /// <summary>
        /// The value stored in the current Tight type.
        /// </summary>
        public dynamic V { get; }
        private Tight(dynamic v) => V = v;
        public override string ToString() => V.ToString();
        public override bool Equals(object obj) => V.Equals(obj);
        public override int GetHashCode() => V.GetHashCode();
        /// <summary>
        /// The type of the value stored in the current Tight type.
        /// </summary>
        public Type Type => V.GetType();
        /// <summary>
        /// The value stored in the current Tight type in the form of an object.
        /// </summary>
        public object O => V;
        public static bool operator ==(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> left, Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> right) => left.V.Equals(right.V);
        public static bool operator !=(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> left, Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> right) => !left.V.Equals(right.V);
    }
    public struct Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> : ITight
    {
        public static implicit operator T1(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> self) => self.V;
        public static implicit operator T2(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> self) => self.V;
        public static implicit operator T3(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> self) => self.V;
        public static implicit operator T4(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> self) => self.V;
        public static implicit operator T5(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> self) => self.V;
        public static implicit operator T6(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> self) => self.V;
        public static implicit operator T7(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> self) => self.V;
        public static implicit operator T8(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> self) => self.V;
        public static implicit operator T9(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> self) => self.V;
        public static implicit operator T10(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> self) => self.V;
        public static implicit operator T11(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> self) => self.V;
        public static implicit operator T12(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> self) => self.V;
        public static implicit operator T13(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> self) => self.V;
        public static implicit operator T14(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> self) => self.V;
        public static implicit operator T15(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> self) => self.V;
        public static implicit operator T16(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> self) => self.V;
        public static implicit operator T17(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> self) => self.V;
        public static implicit operator T18(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> self) => self.V;
        public static implicit operator T19(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> self) => self.V;
        public static implicit operator T20(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> self) => self.V;
        /// <summary>
        /// Creates and returns a new Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>
        /// </summary>
        public static Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> New<U>(U v) where U : T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20 =>
        new Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20>(v);
        /// <summary>
        /// The value stored in the current Tight type.
        /// </summary>
        public dynamic V { get; }
        private Tight(dynamic v) => V = v;
        public override string ToString() => V.ToString();
        public override bool Equals(object obj) => V.Equals(obj);
        public override int GetHashCode() => V.GetHashCode();
        /// <summary>
        /// The type of the value stored in the current Tight type.
        /// </summary>
        public Type Type => V.GetType();
        /// <summary>
        /// The value stored in the current Tight type in the form of an object.
        /// </summary>
        public object O => V;
        public static bool operator ==(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> left, Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> right) => left.V.Equals(right.V);
        public static bool operator !=(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> left, Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> right) => !left.V.Equals(right.V);
    }
    public struct Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> : ITight
    {
        public static implicit operator T1(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> self) => self.V;
        public static implicit operator T2(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> self) => self.V;
        public static implicit operator T3(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> self) => self.V;
        public static implicit operator T4(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> self) => self.V;
        public static implicit operator T5(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> self) => self.V;
        public static implicit operator T6(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> self) => self.V;
        public static implicit operator T7(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> self) => self.V;
        public static implicit operator T8(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> self) => self.V;
        public static implicit operator T9(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> self) => self.V;
        public static implicit operator T10(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> self) => self.V;
        public static implicit operator T11(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> self) => self.V;
        public static implicit operator T12(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> self) => self.V;
        public static implicit operator T13(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> self) => self.V;
        public static implicit operator T14(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> self) => self.V;
        public static implicit operator T15(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> self) => self.V;
        public static implicit operator T16(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> self) => self.V;
        public static implicit operator T17(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> self) => self.V;
        public static implicit operator T18(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> self) => self.V;
        public static implicit operator T19(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> self) => self.V;
        public static implicit operator T20(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> self) => self.V;
        public static implicit operator T21(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> self) => self.V;
        /// <summary>
        /// Creates and returns a new Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>
        /// </summary>
        public static Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> New<U>(U v) where U : T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21 =>
        new Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21>(v);
        /// <summary>
        /// The value stored in the current Tight type.
        /// </summary>
        public dynamic V { get; }
        private Tight(dynamic v) => V = v;
        public override string ToString() => V.ToString();
        public override bool Equals(object obj) => V.Equals(obj);
        public override int GetHashCode() => V.GetHashCode();
        /// <summary>
        /// The type of the value stored in the current Tight type.
        /// </summary>
        public Type Type => V.GetType();
        /// <summary>
        /// The value stored in the current Tight type in the form of an object.
        /// </summary>
        public object O => V;
        public static bool operator ==(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> left, Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> right) => left.V.Equals(right.V);
        public static bool operator !=(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> left, Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> right) => !left.V.Equals(right.V);
    }
    public struct Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> : ITight
    {
        public static implicit operator T1(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> self) => self.V;
        public static implicit operator T2(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> self) => self.V;
        public static implicit operator T3(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> self) => self.V;
        public static implicit operator T4(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> self) => self.V;
        public static implicit operator T5(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> self) => self.V;
        public static implicit operator T6(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> self) => self.V;
        public static implicit operator T7(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> self) => self.V;
        public static implicit operator T8(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> self) => self.V;
        public static implicit operator T9(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> self) => self.V;
        public static implicit operator T10(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> self) => self.V;
        public static implicit operator T11(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> self) => self.V;
        public static implicit operator T12(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> self) => self.V;
        public static implicit operator T13(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> self) => self.V;
        public static implicit operator T14(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> self) => self.V;
        public static implicit operator T15(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> self) => self.V;
        public static implicit operator T16(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> self) => self.V;
        public static implicit operator T17(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> self) => self.V;
        public static implicit operator T18(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> self) => self.V;
        public static implicit operator T19(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> self) => self.V;
        public static implicit operator T20(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> self) => self.V;
        public static implicit operator T21(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> self) => self.V;
        public static implicit operator T22(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> self) => self.V;
        /// <summary>
        /// Creates and returns a new Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>
        /// </summary>
        public static Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> New<U>(U v) where U : T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22 =>
        new Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22>(v);
        /// <summary>
        /// The value stored in the current Tight type.
        /// </summary>
        public dynamic V { get; }
        private Tight(dynamic v) => V = v;
        public override string ToString() => V.ToString();
        public override bool Equals(object obj) => V.Equals(obj);
        public override int GetHashCode() => V.GetHashCode();
        /// <summary>
        /// The type of the value stored in the current Tight type.
        /// </summary>
        public Type Type => V.GetType();
        /// <summary>
        /// The value stored in the current Tight type in the form of an object.
        /// </summary>
        public object O => V;
        public static bool operator ==(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> left, Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> right) => left.V.Equals(right.V);
        public static bool operator !=(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> left, Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> right) => !left.V.Equals(right.V);
    }
    public struct Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> : ITight
    {
        public static implicit operator T1(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> self) => self.V;
        public static implicit operator T2(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> self) => self.V;
        public static implicit operator T3(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> self) => self.V;
        public static implicit operator T4(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> self) => self.V;
        public static implicit operator T5(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> self) => self.V;
        public static implicit operator T6(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> self) => self.V;
        public static implicit operator T7(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> self) => self.V;
        public static implicit operator T8(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> self) => self.V;
        public static implicit operator T9(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> self) => self.V;
        public static implicit operator T10(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> self) => self.V;
        public static implicit operator T11(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> self) => self.V;
        public static implicit operator T12(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> self) => self.V;
        public static implicit operator T13(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> self) => self.V;
        public static implicit operator T14(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> self) => self.V;
        public static implicit operator T15(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> self) => self.V;
        public static implicit operator T16(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> self) => self.V;
        public static implicit operator T17(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> self) => self.V;
        public static implicit operator T18(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> self) => self.V;
        public static implicit operator T19(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> self) => self.V;
        public static implicit operator T20(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> self) => self.V;
        public static implicit operator T21(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> self) => self.V;
        public static implicit operator T22(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> self) => self.V;
        public static implicit operator T23(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> self) => self.V;
        /// <summary>
        /// Creates and returns a new Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>
        /// </summary>
        public static Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> New<U>(U v) where U : T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23 =>
        new Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23>(v);
        /// <summary>
        /// The value stored in the current Tight type.
        /// </summary>
        public dynamic V { get; }
        private Tight(dynamic v) => V = v;
        public override string ToString() => V.ToString();
        public override bool Equals(object obj) => V.Equals(obj);
        public override int GetHashCode() => V.GetHashCode();
        /// <summary>
        /// The type of the value stored in the current Tight type.
        /// </summary>
        public Type Type => V.GetType();
        /// <summary>
        /// The value stored in the current Tight type in the form of an object.
        /// </summary>
        public object O => V;
        public static bool operator ==(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> left, Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> right) => left.V.Equals(right.V);
        public static bool operator !=(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> left, Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> right) => !left.V.Equals(right.V);
    }
    public struct Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> : ITight
    {
        public static implicit operator T1(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> self) => self.V;
        public static implicit operator T2(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> self) => self.V;
        public static implicit operator T3(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> self) => self.V;
        public static implicit operator T4(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> self) => self.V;
        public static implicit operator T5(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> self) => self.V;
        public static implicit operator T6(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> self) => self.V;
        public static implicit operator T7(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> self) => self.V;
        public static implicit operator T8(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> self) => self.V;
        public static implicit operator T9(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> self) => self.V;
        public static implicit operator T10(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> self) => self.V;
        public static implicit operator T11(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> self) => self.V;
        public static implicit operator T12(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> self) => self.V;
        public static implicit operator T13(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> self) => self.V;
        public static implicit operator T14(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> self) => self.V;
        public static implicit operator T15(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> self) => self.V;
        public static implicit operator T16(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> self) => self.V;
        public static implicit operator T17(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> self) => self.V;
        public static implicit operator T18(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> self) => self.V;
        public static implicit operator T19(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> self) => self.V;
        public static implicit operator T20(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> self) => self.V;
        public static implicit operator T21(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> self) => self.V;
        public static implicit operator T22(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> self) => self.V;
        public static implicit operator T23(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> self) => self.V;
        public static implicit operator T24(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> self) => self.V;
        /// <summary>
        /// Creates and returns a new Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>
        /// </summary>
        public static Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> New<U>(U v) where U : T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24 =>
        new Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24>(v);
        /// <summary>
        /// The value stored in the current Tight type.
        /// </summary>
        public dynamic V { get; }
        private Tight(dynamic v) => V = v;
        public override string ToString() => V.ToString();
        public override bool Equals(object obj) => V.Equals(obj);
        public override int GetHashCode() => V.GetHashCode();
        /// <summary>
        /// The type of the value stored in the current Tight type.
        /// </summary>
        public Type Type => V.GetType();
        /// <summary>
        /// The value stored in the current Tight type in the form of an object.
        /// </summary>
        public object O => V;
        public static bool operator ==(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> left, Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> right) => left.V.Equals(right.V);
        public static bool operator !=(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> left, Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> right) => !left.V.Equals(right.V);
    }
    public struct Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> : ITight
    {
        public static implicit operator T1(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> self) => self.V;
        public static implicit operator T2(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> self) => self.V;
        public static implicit operator T3(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> self) => self.V;
        public static implicit operator T4(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> self) => self.V;
        public static implicit operator T5(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> self) => self.V;
        public static implicit operator T6(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> self) => self.V;
        public static implicit operator T7(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> self) => self.V;
        public static implicit operator T8(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> self) => self.V;
        public static implicit operator T9(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> self) => self.V;
        public static implicit operator T10(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> self) => self.V;
        public static implicit operator T11(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> self) => self.V;
        public static implicit operator T12(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> self) => self.V;
        public static implicit operator T13(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> self) => self.V;
        public static implicit operator T14(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> self) => self.V;
        public static implicit operator T15(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> self) => self.V;
        public static implicit operator T16(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> self) => self.V;
        public static implicit operator T17(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> self) => self.V;
        public static implicit operator T18(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> self) => self.V;
        public static implicit operator T19(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> self) => self.V;
        public static implicit operator T20(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> self) => self.V;
        public static implicit operator T21(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> self) => self.V;
        public static implicit operator T22(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> self) => self.V;
        public static implicit operator T23(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> self) => self.V;
        public static implicit operator T24(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> self) => self.V;
        public static implicit operator T25(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> self) => self.V;
        /// <summary>
        /// Creates and returns a new Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25>
        /// </summary>
        public static Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> New<U>(U v) where U : T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25 =>
        new Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25>(v);
        /// <summary>
        /// The value stored in the current Tight type.
        /// </summary>
        public dynamic V { get; }
        private Tight(dynamic v) => V = v;
        public override string ToString() => V.ToString();
        public override bool Equals(object obj) => V.Equals(obj);
        public override int GetHashCode() => V.GetHashCode();
        /// <summary>
        /// The type of the value stored in the current Tight type.
        /// </summary>
        public Type Type => V.GetType();
        /// <summary>
        /// The value stored in the current Tight type in the form of an object.
        /// </summary>
        public object O => V;
        public static bool operator ==(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> left, Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> right) => left.V.Equals(right.V);
        public static bool operator !=(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> left, Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> right) => !left.V.Equals(right.V);
    }
    public struct Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26> : ITight
    {
        public static implicit operator T1(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26> self) => self.V;
        public static implicit operator T2(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26> self) => self.V;
        public static implicit operator T3(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26> self) => self.V;
        public static implicit operator T4(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26> self) => self.V;
        public static implicit operator T5(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26> self) => self.V;
        public static implicit operator T6(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26> self) => self.V;
        public static implicit operator T7(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26> self) => self.V;
        public static implicit operator T8(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26> self) => self.V;
        public static implicit operator T9(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26> self) => self.V;
        public static implicit operator T10(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26> self) => self.V;
        public static implicit operator T11(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26> self) => self.V;
        public static implicit operator T12(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26> self) => self.V;
        public static implicit operator T13(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26> self) => self.V;
        public static implicit operator T14(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26> self) => self.V;
        public static implicit operator T15(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26> self) => self.V;
        public static implicit operator T16(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26> self) => self.V;
        public static implicit operator T17(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26> self) => self.V;
        public static implicit operator T18(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26> self) => self.V;
        public static implicit operator T19(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26> self) => self.V;
        public static implicit operator T20(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26> self) => self.V;
        public static implicit operator T21(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26> self) => self.V;
        public static implicit operator T22(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26> self) => self.V;
        public static implicit operator T23(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26> self) => self.V;
        public static implicit operator T24(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26> self) => self.V;
        public static implicit operator T25(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26> self) => self.V;
        public static implicit operator T26(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26> self) => self.V;
        /// <summary>
        /// Creates and returns a new Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26>
        /// </summary>
        public static Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26> New<U>(U v) where U : T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26 =>
        new Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26>(v);
        /// <summary>
        /// The value stored in the current Tight type.
        /// </summary>
        public dynamic V { get; }
        private Tight(dynamic v) => V = v;
        public override string ToString() => V.ToString();
        public override bool Equals(object obj) => V.Equals(obj);
        public override int GetHashCode() => V.GetHashCode();
        /// <summary>
        /// The type of the value stored in the current Tight type.
        /// </summary>
        public Type Type => V.GetType();
        /// <summary>
        /// The value stored in the current Tight type in the form of an object.
        /// </summary>
        public object O => V;
        public static bool operator ==(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26> left, Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26> right) => left.V.Equals(right.V);
        public static bool operator !=(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26> left, Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26> right) => !left.V.Equals(right.V);
    }
    public struct Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27> : ITight
    {
        public static implicit operator T1(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27> self) => self.V;
        public static implicit operator T2(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27> self) => self.V;
        public static implicit operator T3(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27> self) => self.V;
        public static implicit operator T4(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27> self) => self.V;
        public static implicit operator T5(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27> self) => self.V;
        public static implicit operator T6(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27> self) => self.V;
        public static implicit operator T7(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27> self) => self.V;
        public static implicit operator T8(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27> self) => self.V;
        public static implicit operator T9(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27> self) => self.V;
        public static implicit operator T10(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27> self) => self.V;
        public static implicit operator T11(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27> self) => self.V;
        public static implicit operator T12(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27> self) => self.V;
        public static implicit operator T13(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27> self) => self.V;
        public static implicit operator T14(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27> self) => self.V;
        public static implicit operator T15(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27> self) => self.V;
        public static implicit operator T16(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27> self) => self.V;
        public static implicit operator T17(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27> self) => self.V;
        public static implicit operator T18(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27> self) => self.V;
        public static implicit operator T19(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27> self) => self.V;
        public static implicit operator T20(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27> self) => self.V;
        public static implicit operator T21(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27> self) => self.V;
        public static implicit operator T22(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27> self) => self.V;
        public static implicit operator T23(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27> self) => self.V;
        public static implicit operator T24(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27> self) => self.V;
        public static implicit operator T25(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27> self) => self.V;
        public static implicit operator T26(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27> self) => self.V;
        public static implicit operator T27(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27> self) => self.V;
        /// <summary>
        /// Creates and returns a new Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27>
        /// </summary>
        public static Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27> New<U>(U v) where U : T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27 =>
        new Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27>(v);
        /// <summary>
        /// The value stored in the current Tight type.
        /// </summary>
        public dynamic V { get; }
        private Tight(dynamic v) => V = v;
        public override string ToString() => V.ToString();
        public override bool Equals(object obj) => V.Equals(obj);
        public override int GetHashCode() => V.GetHashCode();
        /// <summary>
        /// The type of the value stored in the current Tight type.
        /// </summary>
        public Type Type => V.GetType();
        /// <summary>
        /// The value stored in the current Tight type in the form of an object.
        /// </summary>
        public object O => V;
        public static bool operator ==(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27> left, Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27> right) => left.V.Equals(right.V);
        public static bool operator !=(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27> left, Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27> right) => !left.V.Equals(right.V);
    }
    public struct Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28> : ITight
    {
        public static implicit operator T1(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28> self) => self.V;
        public static implicit operator T2(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28> self) => self.V;
        public static implicit operator T3(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28> self) => self.V;
        public static implicit operator T4(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28> self) => self.V;
        public static implicit operator T5(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28> self) => self.V;
        public static implicit operator T6(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28> self) => self.V;
        public static implicit operator T7(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28> self) => self.V;
        public static implicit operator T8(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28> self) => self.V;
        public static implicit operator T9(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28> self) => self.V;
        public static implicit operator T10(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28> self) => self.V;
        public static implicit operator T11(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28> self) => self.V;
        public static implicit operator T12(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28> self) => self.V;
        public static implicit operator T13(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28> self) => self.V;
        public static implicit operator T14(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28> self) => self.V;
        public static implicit operator T15(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28> self) => self.V;
        public static implicit operator T16(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28> self) => self.V;
        public static implicit operator T17(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28> self) => self.V;
        public static implicit operator T18(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28> self) => self.V;
        public static implicit operator T19(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28> self) => self.V;
        public static implicit operator T20(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28> self) => self.V;
        public static implicit operator T21(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28> self) => self.V;
        public static implicit operator T22(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28> self) => self.V;
        public static implicit operator T23(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28> self) => self.V;
        public static implicit operator T24(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28> self) => self.V;
        public static implicit operator T25(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28> self) => self.V;
        public static implicit operator T26(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28> self) => self.V;
        public static implicit operator T27(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28> self) => self.V;
        public static implicit operator T28(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28> self) => self.V;
        /// <summary>
        /// Creates and returns a new Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28>
        /// </summary>
        public static Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28> New<U>(U v) where U : T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28 =>
        new Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28>(v);
        /// <summary>
        /// The value stored in the current Tight type.
        /// </summary>
        public dynamic V { get; }
        private Tight(dynamic v) => V = v;
        public override string ToString() => V.ToString();
        public override bool Equals(object obj) => V.Equals(obj);
        public override int GetHashCode() => V.GetHashCode();
        /// <summary>
        /// The type of the value stored in the current Tight type.
        /// </summary>
        public Type Type => V.GetType();
        /// <summary>
        /// The value stored in the current Tight type in the form of an object.
        /// </summary>
        public object O => V;
        public static bool operator ==(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28> left, Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28> right) => left.V.Equals(right.V);
        public static bool operator !=(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28> left, Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28> right) => !left.V.Equals(right.V);
    }
    public struct Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29> : ITight
    {
        public static implicit operator T1(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29> self) => self.V;
        public static implicit operator T2(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29> self) => self.V;
        public static implicit operator T3(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29> self) => self.V;
        public static implicit operator T4(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29> self) => self.V;
        public static implicit operator T5(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29> self) => self.V;
        public static implicit operator T6(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29> self) => self.V;
        public static implicit operator T7(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29> self) => self.V;
        public static implicit operator T8(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29> self) => self.V;
        public static implicit operator T9(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29> self) => self.V;
        public static implicit operator T10(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29> self) => self.V;
        public static implicit operator T11(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29> self) => self.V;
        public static implicit operator T12(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29> self) => self.V;
        public static implicit operator T13(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29> self) => self.V;
        public static implicit operator T14(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29> self) => self.V;
        public static implicit operator T15(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29> self) => self.V;
        public static implicit operator T16(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29> self) => self.V;
        public static implicit operator T17(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29> self) => self.V;
        public static implicit operator T18(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29> self) => self.V;
        public static implicit operator T19(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29> self) => self.V;
        public static implicit operator T20(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29> self) => self.V;
        public static implicit operator T21(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29> self) => self.V;
        public static implicit operator T22(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29> self) => self.V;
        public static implicit operator T23(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29> self) => self.V;
        public static implicit operator T24(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29> self) => self.V;
        public static implicit operator T25(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29> self) => self.V;
        public static implicit operator T26(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29> self) => self.V;
        public static implicit operator T27(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29> self) => self.V;
        public static implicit operator T28(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29> self) => self.V;
        public static implicit operator T29(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29> self) => self.V;
        /// <summary>
        /// Creates and returns a new Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29>
        /// </summary>
        public static Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29> New<U>(U v) where U : T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29 =>
        new Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29>(v);
        /// <summary>
        /// The value stored in the current Tight type.
        /// </summary>
        public dynamic V { get; }
        private Tight(dynamic v) => V = v;
        public override string ToString() => V.ToString();
        public override bool Equals(object obj) => V.Equals(obj);
        public override int GetHashCode() => V.GetHashCode();
        /// <summary>
        /// The type of the value stored in the current Tight type.
        /// </summary>
        public Type Type => V.GetType();
        /// <summary>
        /// The value stored in the current Tight type in the form of an object.
        /// </summary>
        public object O => V;
        public static bool operator ==(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29> left, Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29> right) => left.V.Equals(right.V);
        public static bool operator !=(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29> left, Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29> right) => !left.V.Equals(right.V);
    }
    public struct Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30> : ITight
    {
        public static implicit operator T1(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30> self) => self.V;
        public static implicit operator T2(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30> self) => self.V;
        public static implicit operator T3(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30> self) => self.V;
        public static implicit operator T4(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30> self) => self.V;
        public static implicit operator T5(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30> self) => self.V;
        public static implicit operator T6(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30> self) => self.V;
        public static implicit operator T7(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30> self) => self.V;
        public static implicit operator T8(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30> self) => self.V;
        public static implicit operator T9(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30> self) => self.V;
        public static implicit operator T10(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30> self) => self.V;
        public static implicit operator T11(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30> self) => self.V;
        public static implicit operator T12(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30> self) => self.V;
        public static implicit operator T13(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30> self) => self.V;
        public static implicit operator T14(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30> self) => self.V;
        public static implicit operator T15(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30> self) => self.V;
        public static implicit operator T16(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30> self) => self.V;
        public static implicit operator T17(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30> self) => self.V;
        public static implicit operator T18(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30> self) => self.V;
        public static implicit operator T19(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30> self) => self.V;
        public static implicit operator T20(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30> self) => self.V;
        public static implicit operator T21(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30> self) => self.V;
        public static implicit operator T22(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30> self) => self.V;
        public static implicit operator T23(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30> self) => self.V;
        public static implicit operator T24(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30> self) => self.V;
        public static implicit operator T25(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30> self) => self.V;
        public static implicit operator T26(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30> self) => self.V;
        public static implicit operator T27(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30> self) => self.V;
        public static implicit operator T28(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30> self) => self.V;
        public static implicit operator T29(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30> self) => self.V;
        public static implicit operator T30(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30> self) => self.V;
        /// <summary>
        /// Creates and returns a new Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30>
        /// </summary>
        public static Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30> New<U>(U v) where U : T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30 =>
        new Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30>(v);
        /// <summary>
        /// The value stored in the current Tight type.
        /// </summary>
        public dynamic V { get; }
        private Tight(dynamic v) => V = v;
        public override string ToString() => V.ToString();
        public override bool Equals(object obj) => V.Equals(obj);
        public override int GetHashCode() => V.GetHashCode();
        /// <summary>
        /// The type of the value stored in the current Tight type.
        /// </summary>
        public Type Type => V.GetType();
        /// <summary>
        /// The value stored in the current Tight type in the form of an object.
        /// </summary>
        public object O => V;
        public static bool operator ==(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30> left, Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30> right) => left.V.Equals(right.V);
        public static bool operator !=(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30> left, Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30> right) => !left.V.Equals(right.V);
    }
    public struct Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31> : ITight
    {
        public static implicit operator T1(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31> self) => self.V;
        public static implicit operator T2(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31> self) => self.V;
        public static implicit operator T3(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31> self) => self.V;
        public static implicit operator T4(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31> self) => self.V;
        public static implicit operator T5(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31> self) => self.V;
        public static implicit operator T6(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31> self) => self.V;
        public static implicit operator T7(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31> self) => self.V;
        public static implicit operator T8(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31> self) => self.V;
        public static implicit operator T9(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31> self) => self.V;
        public static implicit operator T10(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31> self) => self.V;
        public static implicit operator T11(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31> self) => self.V;
        public static implicit operator T12(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31> self) => self.V;
        public static implicit operator T13(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31> self) => self.V;
        public static implicit operator T14(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31> self) => self.V;
        public static implicit operator T15(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31> self) => self.V;
        public static implicit operator T16(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31> self) => self.V;
        public static implicit operator T17(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31> self) => self.V;
        public static implicit operator T18(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31> self) => self.V;
        public static implicit operator T19(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31> self) => self.V;
        public static implicit operator T20(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31> self) => self.V;
        public static implicit operator T21(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31> self) => self.V;
        public static implicit operator T22(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31> self) => self.V;
        public static implicit operator T23(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31> self) => self.V;
        public static implicit operator T24(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31> self) => self.V;
        public static implicit operator T25(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31> self) => self.V;
        public static implicit operator T26(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31> self) => self.V;
        public static implicit operator T27(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31> self) => self.V;
        public static implicit operator T28(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31> self) => self.V;
        public static implicit operator T29(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31> self) => self.V;
        public static implicit operator T30(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31> self) => self.V;
        public static implicit operator T31(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31> self) => self.V;
        /// <summary>
        /// Creates and returns a new Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31>
        /// </summary>
        public static Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31> New<U>(U v) where U : T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31 =>
        new Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31>(v);
        /// <summary>
        /// The value stored in the current Tight type.
        /// </summary>
        public dynamic V { get; }
        private Tight(dynamic v) => V = v;
        public override string ToString() => V.ToString();
        public override bool Equals(object obj) => V.Equals(obj);
        public override int GetHashCode() => V.GetHashCode();
        /// <summary>
        /// The type of the value stored in the current Tight type.
        /// </summary>
        public Type Type => V.GetType();
        /// <summary>
        /// The value stored in the current Tight type in the form of an object.
        /// </summary>
        public object O => V;
        public static bool operator ==(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31> left, Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31> right) => left.V.Equals(right.V);
        public static bool operator !=(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31> left, Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31> right) => !left.V.Equals(right.V);
    }
    public struct Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32> : ITight
    {
        public static implicit operator T1(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32> self) => self.V;
        public static implicit operator T2(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32> self) => self.V;
        public static implicit operator T3(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32> self) => self.V;
        public static implicit operator T4(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32> self) => self.V;
        public static implicit operator T5(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32> self) => self.V;
        public static implicit operator T6(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32> self) => self.V;
        public static implicit operator T7(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32> self) => self.V;
        public static implicit operator T8(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32> self) => self.V;
        public static implicit operator T9(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32> self) => self.V;
        public static implicit operator T10(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32> self) => self.V;
        public static implicit operator T11(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32> self) => self.V;
        public static implicit operator T12(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32> self) => self.V;
        public static implicit operator T13(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32> self) => self.V;
        public static implicit operator T14(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32> self) => self.V;
        public static implicit operator T15(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32> self) => self.V;
        public static implicit operator T16(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32> self) => self.V;
        public static implicit operator T17(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32> self) => self.V;
        public static implicit operator T18(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32> self) => self.V;
        public static implicit operator T19(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32> self) => self.V;
        public static implicit operator T20(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32> self) => self.V;
        public static implicit operator T21(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32> self) => self.V;
        public static implicit operator T22(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32> self) => self.V;
        public static implicit operator T23(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32> self) => self.V;
        public static implicit operator T24(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32> self) => self.V;
        public static implicit operator T25(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32> self) => self.V;
        public static implicit operator T26(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32> self) => self.V;
        public static implicit operator T27(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32> self) => self.V;
        public static implicit operator T28(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32> self) => self.V;
        public static implicit operator T29(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32> self) => self.V;
        public static implicit operator T30(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32> self) => self.V;
        public static implicit operator T31(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32> self) => self.V;
        public static implicit operator T32(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32> self) => self.V;
        /// <summary>
        /// Creates and returns a new Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32>
        /// </summary>
        public static Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32> New<U>(U v) where U : T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32 =>
        new Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32>(v);
        /// <summary>
        /// The value stored in the current Tight type.
        /// </summary>
        public dynamic V { get; }
        private Tight(dynamic v) => V = v;
        public override string ToString() => V.ToString();
        public override bool Equals(object obj) => V.Equals(obj);
        public override int GetHashCode() => V.GetHashCode();
        /// <summary>
        /// The type of the value stored in the current Tight type.
        /// </summary>
        public Type Type => V.GetType();
        /// <summary>
        /// The value stored in the current Tight type in the form of an object.
        /// </summary>
        public object O => V;
        public static bool operator ==(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32> left, Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32> right) => left.V.Equals(right.V);
        public static bool operator !=(Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32> left, Tight<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32> right) => !left.V.Equals(right.V);
    }
}