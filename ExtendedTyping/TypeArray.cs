//This code was generated by TypeArrayGenerate.py
using System;
using System.Collections;
using System.Collections.Generic;
namespace ExtendedTyping
{
    public struct TypeArray<T1> : IEnumerable<Type>
    {
        public IEnumerator<Type> GetEnumerator()
        {
            yield return typeof(T1);
        }
        IEnumerator IEnumerable.GetEnumerator() => this.GetEnumerator();    }
    public struct TypeArray<T1, T2> : IEnumerable<Type>
    {
        public IEnumerator<Type> GetEnumerator()
        {
            yield return typeof(T1);
            yield return typeof(T2);
        }
        IEnumerator IEnumerable.GetEnumerator() => this.GetEnumerator();    }
    public struct TypeArray<T1, T2, T3> : IEnumerable<Type>
    {
        public IEnumerator<Type> GetEnumerator()
        {
            yield return typeof(T1);
            yield return typeof(T2);
            yield return typeof(T3);
        }
        IEnumerator IEnumerable.GetEnumerator() => this.GetEnumerator();    }
    public struct TypeArray<T1, T2, T3, T4> : IEnumerable<Type>
    {
        public IEnumerator<Type> GetEnumerator()
        {
            yield return typeof(T1);
            yield return typeof(T2);
            yield return typeof(T3);
            yield return typeof(T4);
        }
        IEnumerator IEnumerable.GetEnumerator() => this.GetEnumerator();    }
    public struct TypeArray<T1, T2, T3, T4, T5> : IEnumerable<Type>
    {
        public IEnumerator<Type> GetEnumerator()
        {
            yield return typeof(T1);
            yield return typeof(T2);
            yield return typeof(T3);
            yield return typeof(T4);
            yield return typeof(T5);
        }
        IEnumerator IEnumerable.GetEnumerator() => this.GetEnumerator();    }
    public struct TypeArray<T1, T2, T3, T4, T5, T6> : IEnumerable<Type>
    {
        public IEnumerator<Type> GetEnumerator()
        {
            yield return typeof(T1);
            yield return typeof(T2);
            yield return typeof(T3);
            yield return typeof(T4);
            yield return typeof(T5);
            yield return typeof(T6);
        }
        IEnumerator IEnumerable.GetEnumerator() => this.GetEnumerator();    }
    public struct TypeArray<T1, T2, T3, T4, T5, T6, T7> : IEnumerable<Type>
    {
        public IEnumerator<Type> GetEnumerator()
        {
            yield return typeof(T1);
            yield return typeof(T2);
            yield return typeof(T3);
            yield return typeof(T4);
            yield return typeof(T5);
            yield return typeof(T6);
            yield return typeof(T7);
        }
        IEnumerator IEnumerable.GetEnumerator() => this.GetEnumerator();    }
    public struct TypeArray<T1, T2, T3, T4, T5, T6, T7, T8> : IEnumerable<Type>
    {
        public IEnumerator<Type> GetEnumerator()
        {
            yield return typeof(T1);
            yield return typeof(T2);
            yield return typeof(T3);
            yield return typeof(T4);
            yield return typeof(T5);
            yield return typeof(T6);
            yield return typeof(T7);
            yield return typeof(T8);
        }
        IEnumerator IEnumerable.GetEnumerator() => this.GetEnumerator();    }
    public struct TypeArray<T1, T2, T3, T4, T5, T6, T7, T8, T9> : IEnumerable<Type>
    {
        public IEnumerator<Type> GetEnumerator()
        {
            yield return typeof(T1);
            yield return typeof(T2);
            yield return typeof(T3);
            yield return typeof(T4);
            yield return typeof(T5);
            yield return typeof(T6);
            yield return typeof(T7);
            yield return typeof(T8);
            yield return typeof(T9);
        }
        IEnumerator IEnumerable.GetEnumerator() => this.GetEnumerator();    }
    public struct TypeArray<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10> : IEnumerable<Type>
    {
        public IEnumerator<Type> GetEnumerator()
        {
            yield return typeof(T1);
            yield return typeof(T2);
            yield return typeof(T3);
            yield return typeof(T4);
            yield return typeof(T5);
            yield return typeof(T6);
            yield return typeof(T7);
            yield return typeof(T8);
            yield return typeof(T9);
            yield return typeof(T10);
        }
        IEnumerator IEnumerable.GetEnumerator() => this.GetEnumerator();    }
    public struct TypeArray<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11> : IEnumerable<Type>
    {
        public IEnumerator<Type> GetEnumerator()
        {
            yield return typeof(T1);
            yield return typeof(T2);
            yield return typeof(T3);
            yield return typeof(T4);
            yield return typeof(T5);
            yield return typeof(T6);
            yield return typeof(T7);
            yield return typeof(T8);
            yield return typeof(T9);
            yield return typeof(T10);
            yield return typeof(T11);
        }
        IEnumerator IEnumerable.GetEnumerator() => this.GetEnumerator();    }
    public struct TypeArray<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12> : IEnumerable<Type>
    {
        public IEnumerator<Type> GetEnumerator()
        {
            yield return typeof(T1);
            yield return typeof(T2);
            yield return typeof(T3);
            yield return typeof(T4);
            yield return typeof(T5);
            yield return typeof(T6);
            yield return typeof(T7);
            yield return typeof(T8);
            yield return typeof(T9);
            yield return typeof(T10);
            yield return typeof(T11);
            yield return typeof(T12);
        }
        IEnumerator IEnumerable.GetEnumerator() => this.GetEnumerator();    }
    public struct TypeArray<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13> : IEnumerable<Type>
    {
        public IEnumerator<Type> GetEnumerator()
        {
            yield return typeof(T1);
            yield return typeof(T2);
            yield return typeof(T3);
            yield return typeof(T4);
            yield return typeof(T5);
            yield return typeof(T6);
            yield return typeof(T7);
            yield return typeof(T8);
            yield return typeof(T9);
            yield return typeof(T10);
            yield return typeof(T11);
            yield return typeof(T12);
            yield return typeof(T13);
        }
        IEnumerator IEnumerable.GetEnumerator() => this.GetEnumerator();    }
    public struct TypeArray<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14> : IEnumerable<Type>
    {
        public IEnumerator<Type> GetEnumerator()
        {
            yield return typeof(T1);
            yield return typeof(T2);
            yield return typeof(T3);
            yield return typeof(T4);
            yield return typeof(T5);
            yield return typeof(T6);
            yield return typeof(T7);
            yield return typeof(T8);
            yield return typeof(T9);
            yield return typeof(T10);
            yield return typeof(T11);
            yield return typeof(T12);
            yield return typeof(T13);
            yield return typeof(T14);
        }
        IEnumerator IEnumerable.GetEnumerator() => this.GetEnumerator();    }
    public struct TypeArray<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15> : IEnumerable<Type>
    {
        public IEnumerator<Type> GetEnumerator()
        {
            yield return typeof(T1);
            yield return typeof(T2);
            yield return typeof(T3);
            yield return typeof(T4);
            yield return typeof(T5);
            yield return typeof(T6);
            yield return typeof(T7);
            yield return typeof(T8);
            yield return typeof(T9);
            yield return typeof(T10);
            yield return typeof(T11);
            yield return typeof(T12);
            yield return typeof(T13);
            yield return typeof(T14);
            yield return typeof(T15);
        }
        IEnumerator IEnumerable.GetEnumerator() => this.GetEnumerator();    }
    public struct TypeArray<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16> : IEnumerable<Type>
    {
        public IEnumerator<Type> GetEnumerator()
        {
            yield return typeof(T1);
            yield return typeof(T2);
            yield return typeof(T3);
            yield return typeof(T4);
            yield return typeof(T5);
            yield return typeof(T6);
            yield return typeof(T7);
            yield return typeof(T8);
            yield return typeof(T9);
            yield return typeof(T10);
            yield return typeof(T11);
            yield return typeof(T12);
            yield return typeof(T13);
            yield return typeof(T14);
            yield return typeof(T15);
            yield return typeof(T16);
        }
        IEnumerator IEnumerable.GetEnumerator() => this.GetEnumerator();    }
    public struct TypeArray<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17> : IEnumerable<Type>
    {
        public IEnumerator<Type> GetEnumerator()
        {
            yield return typeof(T1);
            yield return typeof(T2);
            yield return typeof(T3);
            yield return typeof(T4);
            yield return typeof(T5);
            yield return typeof(T6);
            yield return typeof(T7);
            yield return typeof(T8);
            yield return typeof(T9);
            yield return typeof(T10);
            yield return typeof(T11);
            yield return typeof(T12);
            yield return typeof(T13);
            yield return typeof(T14);
            yield return typeof(T15);
            yield return typeof(T16);
            yield return typeof(T17);
        }
        IEnumerator IEnumerable.GetEnumerator() => this.GetEnumerator();    }
    public struct TypeArray<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18> : IEnumerable<Type>
    {
        public IEnumerator<Type> GetEnumerator()
        {
            yield return typeof(T1);
            yield return typeof(T2);
            yield return typeof(T3);
            yield return typeof(T4);
            yield return typeof(T5);
            yield return typeof(T6);
            yield return typeof(T7);
            yield return typeof(T8);
            yield return typeof(T9);
            yield return typeof(T10);
            yield return typeof(T11);
            yield return typeof(T12);
            yield return typeof(T13);
            yield return typeof(T14);
            yield return typeof(T15);
            yield return typeof(T16);
            yield return typeof(T17);
            yield return typeof(T18);
        }
        IEnumerator IEnumerable.GetEnumerator() => this.GetEnumerator();    }
    public struct TypeArray<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19> : IEnumerable<Type>
    {
        public IEnumerator<Type> GetEnumerator()
        {
            yield return typeof(T1);
            yield return typeof(T2);
            yield return typeof(T3);
            yield return typeof(T4);
            yield return typeof(T5);
            yield return typeof(T6);
            yield return typeof(T7);
            yield return typeof(T8);
            yield return typeof(T9);
            yield return typeof(T10);
            yield return typeof(T11);
            yield return typeof(T12);
            yield return typeof(T13);
            yield return typeof(T14);
            yield return typeof(T15);
            yield return typeof(T16);
            yield return typeof(T17);
            yield return typeof(T18);
            yield return typeof(T19);
        }
        IEnumerator IEnumerable.GetEnumerator() => this.GetEnumerator();    }
    public struct TypeArray<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20> : IEnumerable<Type>
    {
        public IEnumerator<Type> GetEnumerator()
        {
            yield return typeof(T1);
            yield return typeof(T2);
            yield return typeof(T3);
            yield return typeof(T4);
            yield return typeof(T5);
            yield return typeof(T6);
            yield return typeof(T7);
            yield return typeof(T8);
            yield return typeof(T9);
            yield return typeof(T10);
            yield return typeof(T11);
            yield return typeof(T12);
            yield return typeof(T13);
            yield return typeof(T14);
            yield return typeof(T15);
            yield return typeof(T16);
            yield return typeof(T17);
            yield return typeof(T18);
            yield return typeof(T19);
            yield return typeof(T20);
        }
        IEnumerator IEnumerable.GetEnumerator() => this.GetEnumerator();    }
    public struct TypeArray<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21> : IEnumerable<Type>
    {
        public IEnumerator<Type> GetEnumerator()
        {
            yield return typeof(T1);
            yield return typeof(T2);
            yield return typeof(T3);
            yield return typeof(T4);
            yield return typeof(T5);
            yield return typeof(T6);
            yield return typeof(T7);
            yield return typeof(T8);
            yield return typeof(T9);
            yield return typeof(T10);
            yield return typeof(T11);
            yield return typeof(T12);
            yield return typeof(T13);
            yield return typeof(T14);
            yield return typeof(T15);
            yield return typeof(T16);
            yield return typeof(T17);
            yield return typeof(T18);
            yield return typeof(T19);
            yield return typeof(T20);
            yield return typeof(T21);
        }
        IEnumerator IEnumerable.GetEnumerator() => this.GetEnumerator();    }
    public struct TypeArray<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22> : IEnumerable<Type>
    {
        public IEnumerator<Type> GetEnumerator()
        {
            yield return typeof(T1);
            yield return typeof(T2);
            yield return typeof(T3);
            yield return typeof(T4);
            yield return typeof(T5);
            yield return typeof(T6);
            yield return typeof(T7);
            yield return typeof(T8);
            yield return typeof(T9);
            yield return typeof(T10);
            yield return typeof(T11);
            yield return typeof(T12);
            yield return typeof(T13);
            yield return typeof(T14);
            yield return typeof(T15);
            yield return typeof(T16);
            yield return typeof(T17);
            yield return typeof(T18);
            yield return typeof(T19);
            yield return typeof(T20);
            yield return typeof(T21);
            yield return typeof(T22);
        }
        IEnumerator IEnumerable.GetEnumerator() => this.GetEnumerator();    }
    public struct TypeArray<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23> : IEnumerable<Type>
    {
        public IEnumerator<Type> GetEnumerator()
        {
            yield return typeof(T1);
            yield return typeof(T2);
            yield return typeof(T3);
            yield return typeof(T4);
            yield return typeof(T5);
            yield return typeof(T6);
            yield return typeof(T7);
            yield return typeof(T8);
            yield return typeof(T9);
            yield return typeof(T10);
            yield return typeof(T11);
            yield return typeof(T12);
            yield return typeof(T13);
            yield return typeof(T14);
            yield return typeof(T15);
            yield return typeof(T16);
            yield return typeof(T17);
            yield return typeof(T18);
            yield return typeof(T19);
            yield return typeof(T20);
            yield return typeof(T21);
            yield return typeof(T22);
            yield return typeof(T23);
        }
        IEnumerator IEnumerable.GetEnumerator() => this.GetEnumerator();    }
    public struct TypeArray<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24> : IEnumerable<Type>
    {
        public IEnumerator<Type> GetEnumerator()
        {
            yield return typeof(T1);
            yield return typeof(T2);
            yield return typeof(T3);
            yield return typeof(T4);
            yield return typeof(T5);
            yield return typeof(T6);
            yield return typeof(T7);
            yield return typeof(T8);
            yield return typeof(T9);
            yield return typeof(T10);
            yield return typeof(T11);
            yield return typeof(T12);
            yield return typeof(T13);
            yield return typeof(T14);
            yield return typeof(T15);
            yield return typeof(T16);
            yield return typeof(T17);
            yield return typeof(T18);
            yield return typeof(T19);
            yield return typeof(T20);
            yield return typeof(T21);
            yield return typeof(T22);
            yield return typeof(T23);
            yield return typeof(T24);
        }
        IEnumerator IEnumerable.GetEnumerator() => this.GetEnumerator();    }
    public struct TypeArray<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25> : IEnumerable<Type>
    {
        public IEnumerator<Type> GetEnumerator()
        {
            yield return typeof(T1);
            yield return typeof(T2);
            yield return typeof(T3);
            yield return typeof(T4);
            yield return typeof(T5);
            yield return typeof(T6);
            yield return typeof(T7);
            yield return typeof(T8);
            yield return typeof(T9);
            yield return typeof(T10);
            yield return typeof(T11);
            yield return typeof(T12);
            yield return typeof(T13);
            yield return typeof(T14);
            yield return typeof(T15);
            yield return typeof(T16);
            yield return typeof(T17);
            yield return typeof(T18);
            yield return typeof(T19);
            yield return typeof(T20);
            yield return typeof(T21);
            yield return typeof(T22);
            yield return typeof(T23);
            yield return typeof(T24);
            yield return typeof(T25);
        }
        IEnumerator IEnumerable.GetEnumerator() => this.GetEnumerator();    }
    public struct TypeArray<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26> : IEnumerable<Type>
    {
        public IEnumerator<Type> GetEnumerator()
        {
            yield return typeof(T1);
            yield return typeof(T2);
            yield return typeof(T3);
            yield return typeof(T4);
            yield return typeof(T5);
            yield return typeof(T6);
            yield return typeof(T7);
            yield return typeof(T8);
            yield return typeof(T9);
            yield return typeof(T10);
            yield return typeof(T11);
            yield return typeof(T12);
            yield return typeof(T13);
            yield return typeof(T14);
            yield return typeof(T15);
            yield return typeof(T16);
            yield return typeof(T17);
            yield return typeof(T18);
            yield return typeof(T19);
            yield return typeof(T20);
            yield return typeof(T21);
            yield return typeof(T22);
            yield return typeof(T23);
            yield return typeof(T24);
            yield return typeof(T25);
            yield return typeof(T26);
        }
        IEnumerator IEnumerable.GetEnumerator() => this.GetEnumerator();    }
    public struct TypeArray<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27> : IEnumerable<Type>
    {
        public IEnumerator<Type> GetEnumerator()
        {
            yield return typeof(T1);
            yield return typeof(T2);
            yield return typeof(T3);
            yield return typeof(T4);
            yield return typeof(T5);
            yield return typeof(T6);
            yield return typeof(T7);
            yield return typeof(T8);
            yield return typeof(T9);
            yield return typeof(T10);
            yield return typeof(T11);
            yield return typeof(T12);
            yield return typeof(T13);
            yield return typeof(T14);
            yield return typeof(T15);
            yield return typeof(T16);
            yield return typeof(T17);
            yield return typeof(T18);
            yield return typeof(T19);
            yield return typeof(T20);
            yield return typeof(T21);
            yield return typeof(T22);
            yield return typeof(T23);
            yield return typeof(T24);
            yield return typeof(T25);
            yield return typeof(T26);
            yield return typeof(T27);
        }
        IEnumerator IEnumerable.GetEnumerator() => this.GetEnumerator();    }
    public struct TypeArray<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28> : IEnumerable<Type>
    {
        public IEnumerator<Type> GetEnumerator()
        {
            yield return typeof(T1);
            yield return typeof(T2);
            yield return typeof(T3);
            yield return typeof(T4);
            yield return typeof(T5);
            yield return typeof(T6);
            yield return typeof(T7);
            yield return typeof(T8);
            yield return typeof(T9);
            yield return typeof(T10);
            yield return typeof(T11);
            yield return typeof(T12);
            yield return typeof(T13);
            yield return typeof(T14);
            yield return typeof(T15);
            yield return typeof(T16);
            yield return typeof(T17);
            yield return typeof(T18);
            yield return typeof(T19);
            yield return typeof(T20);
            yield return typeof(T21);
            yield return typeof(T22);
            yield return typeof(T23);
            yield return typeof(T24);
            yield return typeof(T25);
            yield return typeof(T26);
            yield return typeof(T27);
            yield return typeof(T28);
        }
        IEnumerator IEnumerable.GetEnumerator() => this.GetEnumerator();    }
    public struct TypeArray<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29> : IEnumerable<Type>
    {
        public IEnumerator<Type> GetEnumerator()
        {
            yield return typeof(T1);
            yield return typeof(T2);
            yield return typeof(T3);
            yield return typeof(T4);
            yield return typeof(T5);
            yield return typeof(T6);
            yield return typeof(T7);
            yield return typeof(T8);
            yield return typeof(T9);
            yield return typeof(T10);
            yield return typeof(T11);
            yield return typeof(T12);
            yield return typeof(T13);
            yield return typeof(T14);
            yield return typeof(T15);
            yield return typeof(T16);
            yield return typeof(T17);
            yield return typeof(T18);
            yield return typeof(T19);
            yield return typeof(T20);
            yield return typeof(T21);
            yield return typeof(T22);
            yield return typeof(T23);
            yield return typeof(T24);
            yield return typeof(T25);
            yield return typeof(T26);
            yield return typeof(T27);
            yield return typeof(T28);
            yield return typeof(T29);
        }
        IEnumerator IEnumerable.GetEnumerator() => this.GetEnumerator();    }
    public struct TypeArray<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30> : IEnumerable<Type>
    {
        public IEnumerator<Type> GetEnumerator()
        {
            yield return typeof(T1);
            yield return typeof(T2);
            yield return typeof(T3);
            yield return typeof(T4);
            yield return typeof(T5);
            yield return typeof(T6);
            yield return typeof(T7);
            yield return typeof(T8);
            yield return typeof(T9);
            yield return typeof(T10);
            yield return typeof(T11);
            yield return typeof(T12);
            yield return typeof(T13);
            yield return typeof(T14);
            yield return typeof(T15);
            yield return typeof(T16);
            yield return typeof(T17);
            yield return typeof(T18);
            yield return typeof(T19);
            yield return typeof(T20);
            yield return typeof(T21);
            yield return typeof(T22);
            yield return typeof(T23);
            yield return typeof(T24);
            yield return typeof(T25);
            yield return typeof(T26);
            yield return typeof(T27);
            yield return typeof(T28);
            yield return typeof(T29);
            yield return typeof(T30);
        }
        IEnumerator IEnumerable.GetEnumerator() => this.GetEnumerator();    }
    public struct TypeArray<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31> : IEnumerable<Type>
    {
        public IEnumerator<Type> GetEnumerator()
        {
            yield return typeof(T1);
            yield return typeof(T2);
            yield return typeof(T3);
            yield return typeof(T4);
            yield return typeof(T5);
            yield return typeof(T6);
            yield return typeof(T7);
            yield return typeof(T8);
            yield return typeof(T9);
            yield return typeof(T10);
            yield return typeof(T11);
            yield return typeof(T12);
            yield return typeof(T13);
            yield return typeof(T14);
            yield return typeof(T15);
            yield return typeof(T16);
            yield return typeof(T17);
            yield return typeof(T18);
            yield return typeof(T19);
            yield return typeof(T20);
            yield return typeof(T21);
            yield return typeof(T22);
            yield return typeof(T23);
            yield return typeof(T24);
            yield return typeof(T25);
            yield return typeof(T26);
            yield return typeof(T27);
            yield return typeof(T28);
            yield return typeof(T29);
            yield return typeof(T30);
            yield return typeof(T31);
        }
        IEnumerator IEnumerable.GetEnumerator() => this.GetEnumerator();    }
    public struct TypeArray<T1, T2, T3, T4, T5, T6, T7, T8, T9, T10, T11, T12, T13, T14, T15, T16, T17, T18, T19, T20, T21, T22, T23, T24, T25, T26, T27, T28, T29, T30, T31, T32> : IEnumerable<Type>
    {
        public IEnumerator<Type> GetEnumerator()
        {
            yield return typeof(T1);
            yield return typeof(T2);
            yield return typeof(T3);
            yield return typeof(T4);
            yield return typeof(T5);
            yield return typeof(T6);
            yield return typeof(T7);
            yield return typeof(T8);
            yield return typeof(T9);
            yield return typeof(T10);
            yield return typeof(T11);
            yield return typeof(T12);
            yield return typeof(T13);
            yield return typeof(T14);
            yield return typeof(T15);
            yield return typeof(T16);
            yield return typeof(T17);
            yield return typeof(T18);
            yield return typeof(T19);
            yield return typeof(T20);
            yield return typeof(T21);
            yield return typeof(T22);
            yield return typeof(T23);
            yield return typeof(T24);
            yield return typeof(T25);
            yield return typeof(T26);
            yield return typeof(T27);
            yield return typeof(T28);
            yield return typeof(T29);
            yield return typeof(T30);
            yield return typeof(T31);
            yield return typeof(T32);
        }
        IEnumerator IEnumerable.GetEnumerator() => this.GetEnumerator();    }
}